name: Aggregate Mintlify Docs

on:
  push:
    branches: ["main"]
  schedule:
    - cron: '0 0 * * *'

permissions:
  contents: write

concurrency:
  group: aggregate-mintlify-docs
  cancel-in-progress: true

jobs:
  aggregate-docs:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout base repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Seed target branch with docs.json if missing and ensure non-empty
        shell: bash
        run: |
          set -euo pipefail
          TARGET_BRANCH="docs"
          if git ls-remote --exit-code --heads origin "$TARGET_BRANCH" > /dev/null 2>&1; then
            echo "Target branch exists: $TARGET_BRANCH"
            git fetch origin "$TARGET_BRANCH":"$TARGET_BRANCH"
          else
            echo "Creating target branch: $TARGET_BRANCH"
            git checkout -b "$TARGET_BRANCH"
            if [ ! -f docs.json ]; then
              echo "docs.json not found in current tree; checking out from main"
              git checkout main -- docs.json || { echo "docs.json missing on main"; exit 1; }
            fi
            git add docs.json
            git -c user.name="Mintie Bot" -c user.email="aws@mintlify.com" commit -m "chore: seed docs.json for multirepo aggregation" || true
            git push origin "$TARGET_BRANCH"
          fi

          # Ensure docs.json on target branch is non-empty
          git checkout "$TARGET_BRANCH"
          if [ ! -s docs.json ]; then
            echo "docs.json on $TARGET_BRANCH is empty or missing; restoring from main"
            git checkout main -- docs.json || { echo "docs.json missing on main"; exit 1; }
            git add docs.json
            git -c user.name="Mintie Bot" -c user.email="aws@mintlify.com" commit -m "fix: restore docs.json on $TARGET_BRANCH" || true
            git push origin "$TARGET_BRANCH"
          fi
          echo "docs.json size on $TARGET_BRANCH: $(wc -c < docs.json) bytes"
          git checkout -

      - name: Validate base docs.json
        run: |
          test -s docs.json || { echo "docs.json is empty"; exit 1; }
          node -e "JSON.parse(require('fs').readFileSync('docs.json','utf8')); console.log('Base docs.json OK')"

      - name: Ensure working tree is on docs branch
        run: |
          git checkout docs
          echo "On branch: $(git rev-parse --abbrev-ref HEAD)"
          echo "docs.json size: $(wc -c < docs.json) bytes"
          echo "docs.json head (first 200 chars):"
          head -c 200 docs.json || true
          echo "\n"

      - name: Normalize base docs.json on docs branch
        run: |
          node -e "const fs=require('fs'); const p='docs.json'; const t=fs.readFileSync(p,'utf8'); const o=JSON.parse(t); fs.writeFileSync(p, JSON.stringify(o, null, 2)); console.log('Normalized docs.json length:', fs.readFileSync(p,'utf8').length);"
          git add docs.json
          git -c user.name="Mintie Bot" -c user.email="aws@mintlify.com" commit -m "chore: normalize docs.json" || true
          git push origin docs

      - name: Debug - show subrepo docs.json excerpt
        run: |
          rm -rf _subrepo || true
          git clone --depth 1 --branch main https://github.com/wheat2021/mcphub-docs _subrepo
          if [ -f _subrepo/docs.json ]; then
            echo "Subrepo docs.json size: $(wc -c < _subrepo/docs.json) bytes"
            echo "Subrepo docs.json head (first 200 chars):"
            head -c 200 _subrepo/docs.json || true
            echo "\n"
          else
            echo "Subrepo docs.json missing!" && exit 1
          fi

      - name: Aggregate (custom node script)
        shell: bash
        env:
          GH_PAT: ${{ secrets.PUSH_TOKEN }}
        run: |
          set -euo pipefail
          git checkout docs
          node <<'NODE'
          const { execSync } = require('child_process');
          const fs = require('fs');
          const path = require('path');

          function sh(cmd){ console.log('$', cmd); return execSync(cmd, {stdio:'inherit'}); }

          // Read base docs.json
          const basePath = 'docs.json';
          const baseText = fs.readFileSync(basePath, 'utf8');
          const base = JSON.parse(baseText);

          // Clone subrepo
          const TMP = '_subrepo_merge';
          const DEST = 'mcphub-docs';
          if (fs.existsSync(TMP)) fs.rmSync(TMP, {recursive:true, force:true});
          if (fs.existsSync(DEST)) fs.rmSync(DEST, {recursive:true, force:true});
          const url = 'https://github.com/wheat2021/mcphub-docs';
          sh(`git clone --depth 1 --branch main ${url} ${TMP}`);
          fs.renameSync(TMP, DEST);

          const subText = fs.readFileSync(path.join(DEST, 'docs.json'), 'utf8');
          const sub = JSON.parse(subText);

          function prependPrefix(group, prefix){
            return {
              ...group,
              pages: (group.pages || []).map(e => typeof e === 'string' ? `${prefix}/${e}` : prependPrefix(e, prefix))
            };
          }

          function extractGroups(nav){
            const groups = [];
            if (!nav) return groups;
            if (nav.groups) groups.push(...nav.groups);
            if (nav.pages && nav.pages.length){ groups.push({ group: 'Pages', pages: nav.pages }); }
            if (nav.tabs){
              for (const t of nav.tabs){
                if (t.groups && t.groups.length) groups.push(...t.groups);
                if (t.pages && t.pages.length) groups.push({ group: t.tab || 'Pages', pages: t.pages });
              }
            }
            return groups;
          }

          function mergeDocsNavigation(mainNav, subNav, prefix){
            const subGroups = extractGroups(subNav).map(g => prependPrefix(g, prefix));
            if (Array.isArray(mainNav?.tabs)){
              const label = 'mcphub-docs';
              const newTab = { tab: label, groups: subGroups };
              mainNav.tabs = [ ...(mainNav.tabs || []), newTab ];
              return mainNav;
            }
            const merged = { ...mainNav };
            merged.groups = [ ...(merged.groups || []), ...subGroups ];
            return merged;
          }

          base.navigation = mergeDocsNavigation(base.navigation, sub.navigation, DEST);
          fs.writeFileSync(basePath, JSON.stringify(base, null, 2));
          console.log('Merged and wrote', basePath, 'size', fs.readFileSync(basePath,'utf8').length);
          NODE

          git add docs.json mcphub-docs
          git -c user.name="Mintie Bot" -c user.email="aws@mintlify.com" commit -m "chore: aggregate mcphub-docs" || echo "No changes to commit"
          git push origin docs
